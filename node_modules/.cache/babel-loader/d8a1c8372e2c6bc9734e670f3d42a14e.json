{"ast":null,"code":"var _jsxFileName = \"/Users/tmonnie/Desktop/react-pratice/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { timingSafeEqual } from \"crypto\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      friends,\n      topscore: 0,\n      clicked: 0,\n      id: '',\n      array: []\n    };\n\n    this.makearray = id => {\n      this.setState({\n        count: this.state.count + 1\n      });\n\n      if (this.state.count >= this.state.topscore) {\n        this.setState({\n          topscore: this.state.topscore + 1\n        });\n      }\n\n      const array = this.state.array.concat(id);\n      this.setState({\n        array: array\n      }, () => {\n        console.log('whoa' + this.state.array); //making setState 'synchronous' instead of asynchrounous\n\n        var first = this.state.array[0];\n\n        for (var i = 0; i < this.state.array.length; i++) {\n          if (first === this.state.array[i + 1]) {\n            alert('you lose!');\n            this.setState({\n              count: 0\n            }); //restart the count\n\n            this.setState({\n              array: []\n            }); // restart the array \n          }\n        }\n\n        const rename = this.state.friends.sort(() => 0.5 - Math.random());\n        this.setState({\n          friends: rename\n        });\n      });\n      console.log(this.state.array);\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Click on an Image to raise your score, but don't click on an image twice!\"), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"  Score: \", this.state.count, \"   \"), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"  Top Score: \", this.state.topscore), this.state.friends.map(friend => React.createElement(FriendCard, {\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      occupation: friend.occupation,\n      location: friend.location,\n      count: this.state.count //reveals the state count\n      ,\n      makearray: this.makearray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tmonnie/Desktop/react-pratice/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","timingSafeEqual","App","state","count","topscore","clicked","id","array","makearray","setState","concat","console","log","first","i","length","alert","rename","sort","Math","random","render","map","friend","name","image","occupation","location"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport { timingSafeEqual } from \"crypto\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    count:0,\n    friends, \n    topscore: 0, \n    clicked: 0,\n    id: '',\n    array: []\n    \n  };\n\nmakearray = (id) => {\n             this.setState({count: this.state.count + 1 }) \n      \n             if (this.state.count>=this.state.topscore) {\n        this.setState({topscore: this.state.topscore +1 })\n     \n       }\n      \n      \n          const array = this.state.array.concat(id);\n      this.setState({array: array }, ()=> {console.log('whoa' + this.state.array )  //making setState 'synchronous' instead of asynchrounous\n    \n      var first = this.state.array[0];\n       for (var i=0; i<this.state.array.length; i++) {\n        if (first === this.state.array[i+1]) {\n         alert('you lose!');\n          this.setState({count: 0});     //restart the count\n          this.setState({array: []});    // restart the array \n          }\n      }\n\n      const rename = this.state.friends.sort( ()=> 0.5-Math.random());\n      this.setState({friends:rename});\n    \n      }); \n      \n      \n      console.log(this.state.array);\n    \n}\n\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n    \n      <Wrapper>\n        <h1>Click on an Image to raise your score, but don't click on an image twice!</h1>\n        <Title>  Score: {this.state.count}   </Title>\n        <Title>  Top Score: {this.state.topscore}</Title>\n\n        {this.state.friends.map(friend => (\n          <FriendCard\n     \n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n            count={this.state.count}  //reveals the state count\n          \n            makearray={this.makearray}\n\n          />\n        ))}\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}